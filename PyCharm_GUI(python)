import tkinter as tk
import serial
from tkinter import messagebox

# 아두이노 시리얼포트 연결부분
ARD = serial.Serial('COM4', 9600)

class Clock():
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("배터리관리시스템(BMS) 관제프로그램 v1.0 [캡스톤 프로젝트]")

        # 배터리 1 상태 제목 부분
        self.label7 = tk.Label(text="", font=('Helvetica', 21), fg='black')
        self.label7.grid(row=2, column=10)

        # 배터리 2 상태 제목 부분
        self.label8 = tk.Label(text="", font=('Helvetica', 21), fg='black')
        self.label8.grid(row=2, column=30, pady=30)

        # 중간 구분선
        self.label11 = tk.Label(text="", font=('Helvetica', 17), fg='black')
        self.label11.grid(row=2, column=20, pady=30, padx=10)

        # 아두이노 시리얼창 데이터 값 한줄씩 읽어와서 슬라이싱후 저장
        A = ARD.readline()

        Ard1 = int(A[3:6]) # 배터리 1 잔량
        Ard2 = int(A[6:8]) # 배터리 1 전압
        Ard3 = int(A[8:10]) # 배터리 1 온도
        Ard4 = int(A[10:13]) # 배터리 1 저항

        Ard5 = int(A[14:17]) # 배터리 2 잔량
        Ard6 = int(A[17:19]) # 배터리 2 전압
        Ard7 = int(A[19:21]) # 배터리 2 온도
        Ard8 = int(A[21:24]) # 배터리 2 저항

        # 배터리 1 잔량 < 50일때 텍스트 빨간색
        if Ard1 < 50:
            self.label1 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label1 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label1.grid(row=20, column=10, sticky="w", pady=10, ipadx=30)

        # 배터리 1 전압 < 10일때 텍스트 빨간색
        if Ard2 < 10:
            self.label2 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label2 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label2.grid(row=30, column=10, sticky="w", pady=10, ipadx=30)

        # 배터리 1 온도 > 40일때 텍스트 빨간색
        if Ard3 > 40:
            self.label3 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label3 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label3.grid(row=40, column=10, sticky="w", pady=10, ipadx=30)

        # 배터리 1 저항 < 500일때 텍스트 빨간색
        if Ard4 < 500:
            self.label4 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label4 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label4.grid(row=50, column=10, sticky="w", pady=10, ipadx=30)

        # 배터리 2 잔량 < 50일때 텍스트 빨간색
        if Ard5 < 50:
            self.label5 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label5 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label5.grid(row=20, column=30, sticky="w", pady=10, ipadx=30)

        # 배터리 2 전압 < 10일때 텍스트 빨간색
        if Ard6 < 10:
            self.label6 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label6 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label6.grid(row=30, column=30, sticky="w", pady=10, ipadx=30)

        # 배터리 2 온도 > 40일때 텍스트 빨간색
        if Ard7 > 40:
            self.label9 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label9 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label9.grid(row=40, column=30, sticky="w", pady=10, ipadx=30)

        # 배터리 2 저항 < 500일때 텍스트 빨간색
        if Ard8 < 500:
            self.label10 = tk.Label(text="", font=('Helvetica', 15), fg='red')
        else:
            self.label10 = tk.Label(text="", font=('Helvetica', 15), fg='blue')

        self.label10.grid(row=50, column=30, sticky="w", pady=10, ipadx=30)

        self.update_clock()
        self.root.mainloop()

    # 데이터 값 실시간으로 업데이트 해주는 함수
    def update_clock(self):

        # 아두이노 시리얼창 데이터 값 한줄씩 읽어와서 슬라이싱후 저장
        A = ARD.readline()

        Ard1 = int(A[3:6])  # 배터리 1 잔량
        Ard2 = int(A[6:8])  # 배터리 1 전압
        Ard3 = int(A[8:10])  # 배터리 1 온도
        Ard4 = int(A[10:13])  # 배터리 1 저항

        Ard5 = int(A[14:17])  # 배터리 2 잔량
        Ard6 = int(A[17:19])  # 배터리 2 전압
        Ard7 = int(A[19:21])  # 배터리 2 온도
        Ard8 = int(A[21:24])  # 배터리 2 저항

        # 배터리 1 잔량 < 50일때 경고창 팝업
        if Ard1 < 50:
            a = "배터리1의 잔량을 점검하시오. =>잔량:"
            b = str(Ard1)
            c = a + " " + b + "%"
            tk.messagebox.showwarning("잔량 부족!!!",c)

        # 배터리 1 전압 < 10일때 에러창 팝업
        if Ard2 < 10:
            a = "배터리1의 전압을 점검하시오. =>전압:"
            b = str(Ard2)
            c = a + " " + b + "V"
            tk.messagebox.showerror("전압 위험!!!",c)

        # 배터리 1 온도 > 40일때 경고창 팝업
        if Ard3 > 40:
            a = "배터리1의 온도를 점검하시오. =>온도:"
            b = str(Ard3)
            c = a + " " + b + "°C"
            tk.messagebox.showwarning("온도 위험!!!",c)

        # 배터리 1 저항 < 500일때 에러창 팝업
        if Ard4 < 500:
            a = "배터리1의 저항을 점검하시오. =>저항:"
            b = str(Ard4)
            c = a + " " + b + " Ohm"
            tk.messagebox.showerror("저항 위험!!!",c)

        # 배터리 2 잔량 < 50일때 경고창 팝업
        if Ard5 < 50:
            a = "배터리2의 잔량을 점검하시오. =>잔량:"
            b = str(Ard5)
            c = a + " " + b + "%"
            tk.messagebox.showwarning("잔량 부족!!!",c)

        # 배터리 2 전압 < 10일때 에러창 팝업
        if Ard6 < 10:
            a = "배터리2의 전압을 점검하시오. =>전압:"
            b = str(Ard6)
            c = a + " " + b + "V"
            tk.messagebox.showerror("전압 위험!!!",c)

        # 배터리 2 온도 > 40일때 경고창 팝업
        if Ard7 > 40:
            a = "배터리2의 온도를 점검하시오. =>온도:"
            b = str(Ard7)
            c = a + " " + b + "°C"
            tk.messagebox.showwarning("온도 위험!!!", c)

        # 배터리 2 저항 < 500일때 에러창 팝업
        if Ard8 < 500:
            a = "배터리2의 저항을 점검하시오. =>저항:"
            b = str(Ard8)
            c = a + " " + b + " Ohm"
            tk.messagebox.showerror("저항 위험!!!",c)

        # 라벨 출력 텍스트 내용
        self.label7.configure(text="===<< #1 배터리 상태 >>===")
        self.label1.configure(text="▶배터리 잔량(%) : " + str(Ard1) + " (%)")
        self.label2.configure(text="▶배터리 전압(V) : " + str(Ard2) + " (V)")
        self.label3.configure(text="▶배터리 온도(°C) : " + str(Ard3) + " (°C)")
        self.label4.configure(text="▶배터리 저항(Ohm) : " + str(Ard4) + " (Ohm)")

        self.label8.configure(text="===<< #2 배터리 상태 >>===")
        self.label5.configure(text="▶배터리 잔량(%) : " + str(Ard5) + " (%)")
        self.label6.configure(text="▶배터리 전압(V) : " + str(Ard6) + " (V)")
        self.label9.configure(text="▶배터리 온도(°C) : " + str(Ard7) + " (°C)")
        self.label10.configure(text="▶배터리 저항(Ohm) : " + str(Ard8) + " (Ohm)")

        self.label11.configure(text="|")

        self.root.after(1000, self.update_clock)

app = Clock()
